#!/usr/bin/env python3
import os
import sys
import subprocess
import re

# Colors
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
CYAN = "\033[1;36m"
BOLD = "\033[1m"
RESET = "\033[0m"

def create_target_directory(target):
    """Create the target directory in /tmp/VirexCore/"""
    target_dir = f"/tmp/VirexCore/{target}"
    os.makedirs(target_dir, exist_ok=True)
    return target_dir

def run_nmap_scan(target):
    """Run Nmap vulnerability scan"""
    target_dir = create_target_directory(target)
    output_file = os.path.join(target_dir, "nmap_vuln_scan.txt")
    
    print(f"{YELLOW}[~] Running Nmap vulnerability scan on {target}...{RESET}")
    
    try:
        cmd = ["nmap", "-sV", "--script", "vuln", target, "-oN", output_file]
        subprocess.run(cmd, check=True)
        print(f"{GREEN}[âœ“] Nmap scan completed. Results saved to {output_file}{RESET}")
        return output_file
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running Nmap scan{RESET}")
        return None
    except FileNotFoundError:
        print(f"{RED}[!] Nmap not found. Please install Nmap.{RESET}")
        return None

def parse_nmap_results(output_file):
    """Parse Nmap results and suggest Metasploit modules"""
    vulnerabilities = []
    
    try:
        with open(output_file, 'r') as f:
            content = f.read()
            
        # Extract vulnerabilities
        vuln_pattern = re.compile(r'([^\n]+)\s+\|\s+vuln\s+\|\s+([^\n]+)')
        matches = vuln_pattern.findall(content)
        
        for match in matches:
            service, vuln_info = match
            vulnerabilities.append((service, vuln_info))
            
            # Suggest Metasploit modules based on common vulnerabilities
            if "ms08-067" in vuln_info.lower():
                print(f"{GREEN}[+] Detected MS08-067 vulnerability{RESET}")
                print(f"{CYAN}[+] Suggested Metasploit module: exploit/windows/smb/ms08_067_netapi{RESET}")
            elif "ms17-010" in vuln_info.lower():
                print(f"{GREEN}[+] Detected MS17-010 vulnerability{RESET}")
                print(f"{CYAN}[+] Suggested Metasploit module: exploit/windows/smb/ms17_010_eternalblue{RESET}")
            elif "heartbleed" in vuln_info.lower():
                print(f"{GREEN}[+] Detected Heartbleed vulnerability{RESET}")
                print(f"{CYAN}[+] Suggested Metasploit module: auxiliary/scanner/ssl/openssl_heartbleed{RESET}")
            elif "shellshock" in vuln_info.lower():
                print(f"{GREEN}[+] Detected Shellshock vulnerability{RESET}")
                print(f"{CYAN}[+] Suggested Metasploit module: exploit/multi/http/apache_mod_cgi_bash_env_exec{RESET}")
            else:
                print(f"{YELLOW}[+] Found vulnerability: {service} - {vuln_info}{RESET}")
                print(f"{CYAN}[+] No specific Metasploit module suggestion available{RESET}")
                
    except Exception as e:
        print(f"{RED}[!] Error parsing Nmap results: {e}{RESET}")
    
    return vulnerabilities

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print(f"{RED}Usage: {sys.argv[0]} <target_ip_or_domain>{RESET}")
        sys.exit(1)
    
    target = sys.argv[1]
    target_dir = create_target_directory(target)
    
    print(f"{GREEN}[+] Target: {target}{RESET}")
    print(f"{GREEN}[+] Output directory: {target_dir}{RESET}")
    
    output_file = run_nmap_scan(target)
    if output_file:
        vulnerabilities = parse_nmap_results(output_file)
        if vulnerabilities:
            print(f"{GREEN}[+] Found {len(vulnerabilities)} potential vulnerabilities{RESET}")
        else:
            print(f"{YELLOW}[!] No vulnerabilities detected{RESET}")
    else:
        print(f"{RED}[!] Failed to run Nmap scan{RESET}")

if __name__ == "__main__":
    main()