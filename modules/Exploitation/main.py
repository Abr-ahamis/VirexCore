#!/usr/bin/env python3
import os
import sys
import subprocess
from pathlib import Path

# Colors
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
CYAN = "\033[1;36m"
BOLD = "\033[1m"
RESET = "\033[0m"

def create_target_directory(target):
    """Create the target directory in /tmp/VirexCore/"""
    target_dir = f"/tmp/VirexCore/{target}"
    os.makedirs(target_dir, exist_ok=True)
    return target_dir

def clear_screen():
    """Clear the terminal screen"""
    os.system('clear' if os.name == 'posix' else 'cls')

def show_banner():
    """Display the program banner"""
    clear_screen()
    print(f"{BOLD}{CYAN}")
    print("╔══════════════════════════════════╗")
    print("║      EXPLOITATION MISSION UI     ║")
    print("╚══════════════════════════════════╝")
    print(f"{RESET}")

def show_menu():
    """Display the main menu"""
    print(f"{GREEN}[1] Vulnerability Pre-Check (Nmap){RESET}")
    print(f"{GREEN}[2] Metasploit Auto-Exploitation{RESET}")
    print(f"{GREEN}[3] Reverse Shell Generator{RESET}")
    print(f"{GREEN}[4] SQL Injection Exploitation{RESET}")
    print(f"{GREEN}[5] Brute Force (Hydra){RESET}")
    print(f"{GREEN}[6] Privilege Escalation (LinPEAS/WinPEAS){RESET}")
    print(f"{YELLOW}[0] Exit{RESET}")
    print(f"{CYAN}>> Select Option [0-6]: {RESET}", end='')

def run_vuln_scan():
    """Run the vulnerability scan module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "vuln_scan.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running vulnerability scan{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def run_metasploit():
    """Run the Metasploit automation module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "metasploit_auto.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running Metasploit automation{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def run_reverse_shell():
    """Run the reverse shell generator module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "reverse_shell.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running reverse shell generator{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def run_sqlmap():
    """Run the SQL injection module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "sqlmap_auto.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running SQL injection{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def run_hydra():
    """Run the brute-force module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "hydra_bruteforce.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running brute-force attack{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def run_post_exploit():
    """Run the post-exploitation module"""
    target = input(f"{CYAN}→ Enter Target IP or domain: {RESET}")
    if not target:
        print(f"{RED}[!] Target cannot be empty{RESET}")
        input(f"{YELLOW}Press Enter to continue...{RESET}")
        return
    
    target_dir = create_target_directory(target)
    print(f"{GREEN}[+] Created target directory: {target_dir}{RESET}")
    
    try:
        subprocess.run([sys.executable, "post_exploit.py", target], check=True)
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error running post-exploitation{RESET}")
    
    input(f"{YELLOW}Press Enter to continue...{RESET}")

def main():
    """Main function to run the program"""
    while True:
        show_banner()
        show_menu()
        
        try:
            choice = input().strip()
            
            if choice == "0":
                print(f"{GREEN}[✓] Exiting...{RESET}")
                break
            elif choice == "1":
                run_vuln_scan()
            elif choice == "2":
                run_metasploit()
            elif choice == "3":
                run_reverse_shell()
            elif choice == "4":
                run_sqlmap()
            elif choice == "5":
                run_hydra()
            elif choice == "6":
                run_post_exploit()
            else:
                print(f"{RED}[!] Invalid option. Please select 0-6.{RESET}")
                input(f"{YELLOW}Press Enter to continue...{RESET}")
        except KeyboardInterrupt:
            print(f"\n{YELLOW}[!] Interrupted by user. Exiting...{RESET}")
            break

if __name__ == "__main__":
    main()